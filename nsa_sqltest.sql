/* Tables in the database:
Sales
sales_id (INT) 
customer_id (INT)
product_id (INT)
sale_date (DATE)
quantity (INT)
total_amount (DECIMAL)

Customers
customer_id (INT)
customer_name (VARCHAR)
sales_region (VARCHAR)
sign_up_date (DATE)

Products
product_id (INT)
product_name (VARCHAR)
category (VARCHAR)
price (DECIMAL) */

/* Return the customer_name, product_name, and total_amount for 
each sale in the last 30 days. */
SELECT customer_name, product_name, total_amount
FROM sales
LEFT JOIN customers
ON sales.customer_id = customers.customer_id
LEFT JOIN products
ON sales.product_id = products.product_id
WHERE sale_date BETWEEN (CURRENT_DATE - 30) AND CURRENT_DATE;

/* Find the total revenue generated by each product category 
in the last year. The output should include the product category and the total 
revenue for that category. */
SELECT category, SUM(quantity*price) AS total_revenue
FROM sales
RIGHT JOIN products
ON sales.product_id = products.product_id
WHERE EXTRACT(YEAR FROM sale_date) = EXTRACT(YEAR FROM CURRENT_DATE)
GROUP BY category;

/* Return all customers who made purchases in 2023 and 
are located in the "West" region. */
SELECT customer_name
FROM customers
INNER JOIN sales
ON customers.customer_id = sales.customer_id
WHERE EXTRACT(YEAR FROM sale_date) = 2023 AND sales_region = 'West';

/* Display the total number of sales, total quantity sold, and 
total revenue for each customer. The result should include the customer_name, 
total sales, total quantity, and total revenue. */
SELECT customer_name, COUNT(sales.customer_id) AS total_sales, SUM(quantity) AS total_quantity, SUM(price*quantity) AS total_revenue
FROM sales
RIGHT JOIN customers
ON sales.customer_id = customers.customer_id
LEFT JOIN products
ON sales.product_id = products.product_id
GROUP BY customer_name;

/* Find the top 3 customers (by total revenue) in the year 2023. */
SELECT customer_name, SUM(quantity*price) AS total_revenue
FROM customers
LEFT JOIN sales
ON customers.customer_id = sales.customer_id
LEFT JOIN products
ON sales.product_id = products.product_id
WHERE EXTRACT(YEAR FROM sale_date) = 2023
GROUP BY customer_name
ORDER BY total_revenue DESC
LIMIT 3;

/* Rank products by their total sales quantity in 2023. The result should include 
the product_name, total quantity sold, and rank. */
SELECT product_name, SUM(quantity) AS total_quantity_sold, 
		RANK() OVER(ORDER BY SUM(quantity) DESC) rank
FROM products
LEFT JOIN sales
ON products.product_id = sales.product_id
WHERE EXTRACT(YEAR FROM sale_date) = 2023
GROUP BY product_name;

/* Categorize customers into "New" (if they signed up in the last 6 months) or "Existing" 
based on their sign_up_date. Include the customer_name, region, and category in the result. */
SELECT customer_name, sales_region AS region,
CASE
	WHEN sign_up_date BETWEEN (CURRENT_DATE - interval '6 months') AND CURRENT_DATE
	THEN 'New'
	ELSE 'Existing'
END AS category
FROM customers;

/* Return the month and year along with the total sales for 
each month for the last 12 months. */
SELECT EXTRACT(MONTH FROM sale_date) AS month, EXTRACT(YEAR FROM sale_date) AS year, 
		COUNT(sales_id) AS total_sales
FROM sales
WHERE sale_date BETWEEN (CURRENT_DATE - interval '12 months') AND CURRENT_DATE
GROUP BY EXTRACT(MONTH FROM sale_date), EXTRACT(YEAR FROM sale_date);

/* Return the product categories that generated more than $50,000 
in revenue during the last 6 months. */
SELECT category
FROM products
LEFT JOIN sales
ON products.product_id = sales.product_id
WHERE sale_date BETWEEN (CURRENT_DATE - interval '6 months') AND CURRENT_DATE
GROUP BY category
HAVING SUM(price*quantity) > 50000;

/* Check for any sales where the total_amount doesnâ€™t match the expected value 
(i.e., quantity * price). */
SELECT sales_id
FROM sales
LEFT JOIN products
ON sales.product_id = products.product_id
WHERE total_amount != (quantity*price);
